
.home-header-container {
    height: 60px;
    width: 100%;
    padding: 0 40px;
    position : sticky;
    top : 0;
    
    background: radial-gradient(circle at 10% 20%, rgba(91, 173, 254, 0.46) 0%, rgba(91, 224, 254, 0.46) 47.2%, rgba(170, 254, 235, 0.43) 90%);
    z-index : 100;
    
    .home-header-content {
      width: 100%;
      height: 100%;
      display: flex;
      
      .left-content {
        width: 15%;
        display: flex;
        align-items: center;
        
        .header-logo {
          height : 200%;
          width : 130%;
          cursor : pointer;
          transform: scale(0.5, 0.5);
          margin-left: -8px;
        }  
      }


      #menu__toggle {
  opacity: 0;
}
#menu__toggle:checked + .menu__btn > span {
  transform: rotate(45deg);
}
#menu__toggle:checked + .menu__btn > span::before {
  top: 0;
  transform: rotate(0deg);
}
#menu__toggle:checked + .menu__btn > span::after {
  top: 0;
  transform: rotate(90deg);
}
#menu__toggle:checked ~ .menu__box {
  left: 0 !important;
  background: linear-gradient(-225deg, #5D9FFF 0%, #B8DCFF 48%, #6BBBFF 100%) !important;
}
.menu__btn {
  position: fixed;
  color: blue;
  top: 27px;
  left: 20px;
  width: 26px;
  height: 26px;
  cursor: pointer;
  z-index: 1;
}
.menu__btn > span,
.menu__btn > span::before,
.menu__btn > span::after {
  display: block;
  position: absolute;
  width: 100%;
  height: 2px;
  background-color: rgb(255, 166, 0);
  transition-duration: .25s;
}
.menu__btn > span::before {
  content: '';
  top: -8px;
}
.menu__btn > span::after {
  content: '';
  top: 8px;
}
.menu__box {
  display: block;
  position: fixed;
  top: 0;
  left: -100%;
  width: 212px;
  height: 100%;
  margin: 0;
  padding: 80px 0;
  list-style: none;
  background-color: #ECEFF1;
  box-shadow: 2px 2px 6px rgba(0, 0, 0, .4);
  transition-duration: .25s;
}
.menu__item {
  display: block;
  padding: 12px 24px;
  color: #333;
  font-family: 'Roboto', sans-serif;
  font-size: 20px;
  font-weight: 600;
  text-decoration: none;
  transition-duration: .25s;
}
.menu__item:hover {
  background: linear-gradient(93.1deg, rgb(238, 254, 183) 19.1%, rgb(169, 254, 222) 53.9%, rgb(90, 222, 255) 92%);
}
        // i {
        //   font-size: 25px;
        //   color: grey;
        //   cursor: pointer;
        // }
      }

      .center-content {
        width: 60%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        white-space: nowrap; // Ngăn chữ xuống dòng
        overflow: hidden; // Ẩn chữ vượt quá kích thước của phần tử cha


        .running-text {
          user-select: none;
          font-size: 30px;
          text-shadow:
                1px 1px 2px black,
                0 0 1em blue,
                0 0 0.2em blue;
          color: white;
          width: 100%;       
          animation: runText 20s linear infinite; //Sử dụng animation có tên runText với thời gian 10 giây và lặp vô hạn
          
          }

          @keyframes runText {
            0% {
              transform: translateX(-100%); // Di chuyển chữ sang phải, ở đầu
            }
            100% {
              transform: translateX(100%); // Di chuyển chữ sang trái, ở cuối
            }
          }

        // .child-content {
        //   .subs-title {
        //     font-weight: 400;
        //     font-size: 12px;
        //   }
        // }

        
      }
      

      .center-content-search{
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 -100px 0 -44px;
        min-width: 300px;
        min-height: 10vh;
        width: 10%;
        $btn-d: 3.5em;
        $txt-w: 4*$btn-d;
        $txt-h: .65*$btn-d;
        // $txt-c: #ffeacc;
        $txt-c: rgba(42, 42, 248, 0.982);
        $mag-d: .5*$txt-h;
        $mag-f: .125;
        $mag-w: $mag-f*$mag-d;
        $mag-c: #000;
        $t: .65s;

*, :before, :after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
	font: inherit
}

// html { overflow-x: hidden }

// body {
// 	display: flex;
// 	align-items: center;
// 	justify-content: center;
// 	margin: 0 auto;
// 	min-width: 200px; min-height: 100vh;
// 	background: #252525
// }

[id='search-btn'] {
	position: absolute;
	left: -100vw;
	
	~ * {
		--i: var(--pos, 1);
		--j: calc(1 - var(--i))
	}
	
	&:checked ~ * { --pos: 0 }
}

[for='search-btn'] {
	order: 1;
	overflow: hidden;
	position: relative;
	z-index: 2;
  // margin-bottom: -43pxpx;
  // margin-top: 9px;
  // margin-left: 120px;
  // height: 40px;
  // width: 40px;
	margin-left: -.50*$btn-d;
	width: 0.8*$btn-d; 
  height: 0.8*$btn-d;
	border-radius: 50%;
	transform: translate(var(--pos, -.5*$txt-w)) rotate(45deg);
	background: hsl(calc(336 - var(--i)*269), calc(77% + var(--i)*2%), calc(49% + var(--i)*13%));
	text-indent: -100vw;
	transition: $t ease-out;
	cursor: pointer;
	
	&:before, &:after {
		position: absolute;
		top: 50%; left: 50%;
		margin: -.5*$mag-d;
		width: $mag-d; height: $mag-d;
		transition: inherit;
		content: ''
	}
	
	&:before {
		margin-top: -.4*$mag-w;
		height: $mag-w;
		transform-origin: 100% 0;
		transform: translate(var(--pos, .25*$mag-d)) 
			scalex(calc(1 - var(--i)*.5));
		background: currentcolor;
	}
	
	&:after {
		border: solid $mag-w currentcolor;
		border-radius: calc(var(--i)*50%);
		transform: translate(var(--pos, -.25*$mag-d)) 
			scalex(calc(var(--j)*#{$mag-f} + var(--i)));
		box-shadow: inset 0 0 0 calc(var(--j)*#{.5*$mag-d}) currentcolor;
		transition-property: border-radius, transform, box-shadow;
		transition-timing-function: 
			cubic-bezier(calc(var(--j)*.42),0,calc(1 - var(--i)*.42),1), 
			cubic-bezier(calc(var(--i)*.42),0,calc(1 - var(--j)*.42),1)
	}
}

[id='search-bar'] {
	margin-right: -.25*$btn-d;
	border: none;
	padding: 0 1em;
	width: $txt-w; 
  height: $txt-h;
	border-radius: $txt-h;
	transform: translate(var(--pos, .5*$txt-w));
	background: #7aa3e1;
	--cp: inset(-2em var(--pos, 100%) -2em -2em);
	-webkit-clip-path: var(--cp);
					clip-path: var(--cp);
	color: #fff;
	font: 1em century gothic, verdana, arial, sans-serif;
	transition: $t;
  text-decoration: none;
	
	&::placeholder {
		opacity: .5;
		color: inherit;
		font-size: .875em;
		letter-spacing: 1px;
		text-shadow: 0 0 1px, 0 0 2px
	}
	
	&:focus {
		outline: none;
		box-shadow: 0 0 1.5em $txt-c, 0 1.25em 1.5em rgba(#000, .2);
		background: $txt-c;
		color: white;
	}
}


      }
      .right-content {
        width: 20%;
        display: flex;
        justify-content: flex-end;
        align-items: center;

        
        .support {
          user-select: none;
          padding-right: 10px;         
          display : flex;         
          align-items : center;          
          cursor : pointer;
          color: rgb(230, 119, 15);
          text-shadow:
                0.5px 0.5px 0.5px black,
                0 0 0.2em rgb(255, 251, 0),
                0 0 0.2em rgb(238, 255, 0);
          font-weight: 600;
          
          i {
            font-size : 15px;
            margin-right: 5px;
          }
        }

        .language-vi {
          user-select: none;
          // cursor: pointer;
          // opacity: 0.2;
          
          // &.active {
          //   opacity: 1;
            
          //   span {
          //     color: orange;
          //   }
          // }

          // &.hover {
          //   opacity: 0.8;
          // }
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em rgba(#fff,0);
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  height: 10px;
  width: 10px;
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #ef6eae, 
  close: #ff7f82, 
  raise: #ffa260, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #19bc8b,
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: blue;
  }
}

//=== Pen styling, ignore
body {
  color: #fff;
  background: hsl(227, 10%, 10%);
  font: 300 1em 'Fira Sans', sans-serif;
  
  // Center everything ever
  justify-content: center;
  align-content: center;
  align-items: center;
  text-align: center;
  min-height: 100vh;
  display: flex;
}

// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.05em;
  padding: 0.1em 0.1em;
}

h1 { font-weight: 400; }

code { 
  color: #e4cb58;
  font: inherit;
}
        }

        .language-en {
          user-select: none;
          // margin: 0 10px;          
          // cursor: pointer;
          // opacity: 0.2;
          
          // &.active {
          //   opacity: 1;
            
          //   span {
          //     color: blue;
          //   }
          // }

          // &.hover {
          //   opacity: 0.8;
          // }

.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em rgba(#fff,0);
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  height: 10px;
  width: 10px;
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #ef6eae, 
  close: #ff7f82, 
  raise: #ffa260, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #19bc8b
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: blue;
  }
}

//=== Pen styling, ignore
body {
  color: #fff;
  background: hsl(227, 10%, 10%);
  font: 300 1em 'Fira Sans', sans-serif;
  
  // Center everything ever
  justify-content: center;
  align-content: center;
  align-items: center;
  text-align: center;
  min-height: 100vh;
  display: flex;
}

// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.05em;
  padding: 0.1em 0.1em;
}

h1 { font-weight: 400; }

code { 
  color: #e4cb58;
  font: inherit;
}
        }


      }
    }

  .home-header-banner {
    user-select: none;
    // background-image : url('../../assets/header-background.jpg');
    background-image : url('../../assets/background.png');
    height : 485px;   
    background-repeat: no-repeat;   
    background-size : cover;    
    background-position: center;    
    display : flex;   
    flex-direction : column;
    
    .content-up {    
      user-select: none;
      background-image: linear-gradient(rgba(126, 126, 126, 0.25), rgba(255, 255, 255, 0.1));
      padding-top : 15px;
      height : 65%;

      .content-block {
        padding: 0 430px 0 0;
        .title1 {
        text-align : center;
        font-size : 30px;
        margin-bottom: 5px;
        color: #1873cdf7;
        text-shadow: 2px 7px 5px rgba(0,0,0,0.3), 
                    0px -4px 10px rgba(255,255,255,0.3);
        margin-top : 30px;
        font-weight: 600;
      }
      
      .title2 {
        text-align : center;
        font-size : 30px;
        color: #1873cdf7;
        text-shadow: 2px 7px 5px rgba(0,0,0,0.3), 
                    0px -4px 10px rgba(255,255,255,0.3);
        // text-shadow : 1px 1px 1px #333;
        // color : rgba(35, 26, 26, 0.014);
        margin-bottom: 15px;
        font-weight: 600;
      }

      // // styles.scss

      //   .title1{
      //     text-align : center;
      //     font-size : 30px;
      //     margin-bottom: 5px;
      //     margin-top : 30px;
      //     font-weight: 600;
      //       --s: 0.1em;   /* the thickness of the line */
      //       --c: #2c4bff; /* the color */
            
      //       color: #0000;
      //     // color: #121212;
      //     // text-shadow: 2px 7px 5px rgba(0,0,0,0.3), 
      //     //          0px -4px 10px rgba(255,255,255,0.3);
      //       padding-bottom: var(--s);
      //       background: 
      //         linear-gradient(90deg, var(--c) 50%, #000 0) calc(100% - var(--_p, 0%))/200% 100%,
      //         linear-gradient(var(--c) 0 0) 0% 100%/var(--_p, 0%) var(--s) no-repeat;
      //       -webkit-background-clip: text, padding-box;
      //       background-clip: text, padding-box;
      //       transition: 0.5s;
      //   }

      //   .title2 {
      //       --s: 0.1em;   /* the thickness of the line */
      //       --c: #2c4bff; /* the color */
  
      //       color: #0000;
      //       padding-bottom: var(--s);
      //       background: 
      //         linear-gradient(90deg, var(--c) 50%, #000 0) calc(100% - var(--_p, 0%))/200% 100%,
      //         linear-gradient(var(--c) 0 0) 0% 100%/var(--_p, 0%) var(--s) no-repeat;
      //       -webkit-background-clip: text, padding-box;
      //       background-clip: text, padding-box;
      //       transition: 0.5s;
      //   }

      // .title1:hover,
      // .title2:hover {
      //     --_p: 100%;
      //   }

      
      .search {

        // width : fit-content;
        // display: flex;
        // justify-content: center;
        // align-items : center;
        // margin: 0 auto;
        // padding : 10px;
        // border-radius : 25px;
        // background : #f7d800;
        
        // i {
        //   margin: 0 5px;
        // }
        
        // input {
        //   height : 30px;
        //   width : 360px;
        //   background: transparent;
        //   border : none;
        //   outline : none;
        // }

	      display: flex;
	      place-content: center;
	      grid-gap: 2rem;
        $rotationDuration: 20s;
        $hoverDuration: 0.3s;

        $easeIn: cubic-bezier(0.32, 0, 0.67, 0);
        $easeOut: cubic-bezier(0.33, 1, 0.68, 1);

        $textColor: #b95217;
        $bgColor: #A6B8B1;
        $accentColor: #E8D6C1;


.link {
	width: 10rem;
	height: 10rem;
	display: inline-block;
	font: 300 1.55rem/1.4 "Josefin Sans"; 
	text-transform: uppercase;
	letter-spacing: 0.1175em;
	word-spacing: 0.3em;
	text-decoration: none;

	&__svg {
		width: 100%;
		height: auto;
		transform-box: fill-box;
		fill: $textColor;
		stroke: $textColor;
		stroke-width: 0.05em;
		stroke-linecap: round;
		stroke-linejoin: round;
	}

	&__cloud {
		transform-origin: 50% 50%;
		animation: rotate normal infinite 3 * $rotationDuration linear;
		fill: rgba(255, 255, 255, 0.15);
	}

	&__face,
	&__arrow {
		transform-origin: 50% 50%;
		transition: transform $hoverDuration / 2 $easeIn;

		.link:hover & {
			transform: scale(1.1);
			transition: transform $hoverDuration $easeOut;
		}
	}
	
	&__arrow {
		stroke-width: 0.075em;
	}

	&__text {
		animation: rotateReverse normal infinite $rotationDuration linear;
		transform-origin: 50% 50%;

		.link:hover & {
			animation-play-state: paused;
		}
	}

	&--alt {
		font-size: 1.15rem;
		letter-spacing: 0;
		word-spacing: 0;
	}
}

@keyframes rotate {
	to {
		transform: rotate(360deg);
	}
}

@keyframes rotateReverse {
	to {
		transform: rotate(-360deg);
	}
}

    }

    
      }
       
  }
    
    .content-down {
      height: 35%;
      padding-bottom: 10px;
      display: flex;
      align-items : flex-end;
      justify-content: center;
      background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 1));
      
      .options {
        text-align : center;
        display : flex;
        gap : 50px;
        justify-content: center;
        
        .option-child {
          width: 100px;
          height: 160px;
          
          .icon-child {
            background : white;
            width : 40px;
            height : 40px;
            padding : 10px;
            border-radius: 50%;
            text-align : center;
            margin : 0 auto;
            
            i {
              color :#49bce2;
              font-size: 20px;
            }
          
          }
          
          .text-child {
            font-size : 17px;
            font-weight: 500;
            cursor : pointer;
            
            &:hover {
              color: #49bce2;
            }

        }
      }
    }
  }

  }
    
